@using BlazorComponents.Models

<style>
    ul {
        list-style-type: none;
        left: none;
    }

    .search-icon {
        font-size: 25px;
    }

    li:hover {
        background-color: lightgray;
    }

    .scrollable {
        height: 150px;
        overflow-x: hidden;
        overflow-y: auto;
        padding: 20px;
    }

    .dropdown {
        position: fixed;
        width: 380px;
        display: block;
    }



    .dropdown-button {
        cursor: pointer;
        width: 380px;
    }

</style>

<label for="select" class="form-label">Colors</label>

<div class="form-control dropdown-button" @onclick="ShowDropDown">
    @selectedCount <i class="float-end">&#9660;</i>
</div>

<div class="card dropdown" hidden=@hideMenu>
    <div class="m-3 ">
        <div class="input-group mb-3">
            <input @bind-value="SearchText" @bind-value:event="oninput" type="text" class="form-control">
            <div class="input-group-append">
                <span class="input-group-text"><i class="search-icon oi oi-magnifying-glass"></i></span>
            </div>
        </div>
        <div class="scrollable">
            <ul>
                <li>
                    <label class="label">
                        <input class="form-check-input me-3 ms-2" type="checkbox" @bind="@selectAll" @onclick="eventArgs => { SelectAll(); }"> <strong>Select all</strong>
                    </label>
                </li>
                @foreach (var item in FilteredDropDown)
                {
                    <li>
                        <label class="label">
                            <input class="form-check-input me-3 ms-2" checked="@item.IsChecked" @onchange="eventArgs => { CheckBoxClickedHash(item); }" type="checkbox" name="@item.Value" value="@item.Value"> @item.Value
                        </label>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


@code {
    private int width = 400;
    private bool selectAll;
    private bool hideMenu = true;
    private string selectedCount = "please select filter options...";
    private string SearchText = "";
    private List<MultiSelectDropDown> Ddl { get; set; } = new();
    List<MultiSelectDropDown> FilteredDropDown => Ddl.Where(x => x.Value.ToLower().Contains(SearchText.ToLower())).ToList();

    [Parameter]
    public HashSet<string> SelectedItemsHash { get; set; }

    [Parameter]
    public EventCallback<HashSet<string>> SelectedItemsHashChanged { get; set; }

    protected override void OnInitialized()
    {
        //get ddl
        Ddl.Add(new MultiSelectDropDown { Value = "red", IsChecked = false });
        Ddl.Add(new MultiSelectDropDown { Value = "blue", IsChecked = false });
        Ddl.Add(new MultiSelectDropDown { Value = "green", IsChecked = false });
        Ddl.Add(new MultiSelectDropDown { Value = "black", IsChecked = false });
        Ddl.Add(new MultiSelectDropDown { Value = "purple", IsChecked = false });
        Ddl.Add(new MultiSelectDropDown { Value = "yellow", IsChecked = false });
    }

    protected string CheckBoxClickedHash(MultiSelectDropDown checkedItem)
    {
        checkedItem.IsChecked = !checkedItem.IsChecked;

        if (checkedItem.IsChecked)
        {
            SelectedItemsHash.Add(checkedItem.Value);
        }
        else
        {
            SelectedItemsHash.Remove(checkedItem.Value);
        }


        selectedCount = $"({SelectedItemsHash.Count()}) selected";
        SelectedItemsHashChanged.InvokeAsync(SelectedItemsHash);
        return selectedCount;
    }

    private string SelectAll()
    {
        selectAll = !selectAll;

        if (selectAll)
        {
            foreach (var item in FilteredDropDown)
            {
                if (!SelectedItemsHash.Contains(item.Value))
                {
                    SelectedItemsHash.Add(item.Value);
                    item.IsChecked = true;
                }
            }
        }
        else
        {
            foreach (var item in Ddl)
            {
                item.IsChecked = false;
            }
            SelectedItemsHash.Clear();
        }

        selectedCount = $"({SelectedItemsHash.Count()}) selected";
        SelectedItemsHashChanged.InvokeAsync(SelectedItemsHash);
        return selectedCount;
    }



    private void ShowDropDown()
    {
        hideMenu = !hideMenu;

    }

}
